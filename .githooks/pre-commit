#!/bin/bash

set -e # using the options command to abort script at first error
echo "PRE-COMMIT"

EMAIL=$(git config user.email)

# make sure the user has registered a valid university email address
if [[ $EMAIL != *"@coventry.ac.uk" ]]; then
	echo "  invalid config settings"
	echo "  Your registered email is currently '$EMAIL'"
	echo "  please run the following git commands:"
	echo "    $ git config user.email xxx@coventry.ac.uk"
	echo "    $ git config user.name 'zzz'"
	echo "  where 'xxx' is your university username"
	echo "  and 'zzz' is your name as it appears on your university ID badge"
	echo
	exit 1
fi

# see if the user is trying to merge a branch into master
branch="$(git rev-parse --abbrev-ref HEAD)"
if [[ $2 == 'merge' ]]; then
	echo "merging branch"
	if [[ "$branch" == "master" ]]; then
		echo "  trying to merge into the 'master' branch"
		echo "  you should push the local branch to GitHub"
		echo "  and merge to master using a pull request"
		echo
		exit 1
	fi
fi

# see if the user is trying to commit to the master branch
# if [ "$branch" = "master" ]; then
# 	read -p "  You are about to commit to the master branch, are you sure? [y|n] " -n 1 -r < /dev/tty
# 	echo
# 	if echo $REPLY | grep -E '^[Yy]$' > /dev/null
# 	then
# 		exit 0 # commit will execute
# 	fi
# 	exit 1 # commit will not execute
# fi

for file in $(git diff --cached --name-only | grep -E '\.(js|jsx)$')
do
  git show ":$file" | node_modules/.bin/eslint --stdin --stdin-filename "$file" # we only want to lint the staged changes, not any un-staged changes
  if [ $? -ne 0 ]; then
    echo "ESLint failed on staged file '$file'. Please check your code and try again. You can run ESLint manually via npm run eslint."
    exit 1 # exit with failure status
  fi
done


echo "  commit successful..."
